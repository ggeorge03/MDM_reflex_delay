import numpy as np
import matplotlib.pyplot as plt

def simulate_pd_dde(m=0.191,      # mass in kg
                    L=1.0,        # stick length in meters
                    g=9.81,       # gravitational acceleration
                    P=3.0,        # proportional gain
                    D=0.5,        # derivative gain
                    T=0.1,        # reaction delay
                    dt=0.001,     # time step
                    t_max=10.0,   # total simulation time
                    initial_angle=0.05  # initial disturbance angle in radians
                   ):
    """
    Simulate the delayed PD control system with the following dynamics:
    θ̈(t) = (m * g * L / J) * θ(t) - (P * θ(t-T) + D * θ̇(t-T)) / J,
    where J = (1/3) * m * L^2 is the moment of inertia of the stick about the pivot.
    
    Since the system contains a delay T, an initial history function for t in [-T, 0] is required.
    Here we assume that for t in [-T, 0]:
       θ(t) = initial_angle, and θ̇(t) = 0.
    """
    # Calculate moment of inertia for a uniform rod pivoted at one end
    J = (1/3) * m * L**2
    
    
    t_history = np.arange(-T, 0, dt)
    n_history = len(t_history)
    theta_history = np.full(n_history, initial_angle)  # constant initial angle
    theta_dot_history = np.zeros(n_history)            # initial angular velocity is zero
    acceleration_history = np.zeros(n_history)           # initial angular acceleration is zero
    
    # Initialize lists to store simulation data
    t_vals = list(t_history)
    theta_vals = list(theta_history)
    theta_dot_vals = list(theta_dot_history)
    acceleration_vals = list(acceleration_history)
    
    # Function to obtain the state (theta and theta_dot) at any time t_query
    def get_state_at(t_query):
        if t_query < t_vals[0]:
            return initial_angle, 0.0
        elif t_query <= 0:
            return initial_angle, 0.0
        else:
            theta = np.interp(t_query, t_vals, theta_vals)
            theta_dot = np.interp(t_query, t_vals, theta_dot_vals)
            return theta, theta_dot
    
    # Start simulation from t = 0
    t_current = 0.0
    while t_current < t_max:
        theta_current = theta_vals[-1]
        theta_dot_current = theta_dot_vals[-1]
        
        # Get the state at the delayed time t - T
        t_delayed = t_current - T
        theta_delayed, theta_dot_delayed = get_state_at(t_delayed)
        
      
        # dθ/dt = θ̇ and dθ̇/dt = (m*g*L/J)*θ(t) - (P*θ(t-T) + D*θ̇(t-T))/J
        dtheta_dt = theta_dot_current
        dtheta_dot_dt = (m * g * L / J) * theta_current - (P * theta_delayed + D * theta_dot_delayed) / J
        
        # Using Euler integration
        theta_next = theta_current + dt * dtheta_dt
        theta_dot_next = theta_dot_current + dt * dtheta_dot_dt
        
        # Increment current time and record the new state and computed acceleration
        t_current += dt
        t_vals.append(t_current)
        theta_vals.append(theta_next)
        theta_dot_vals.append(theta_dot_next)
        acceleration_vals.append(dtheta_dot_dt)
    
    return np.array(t_vals), np.array(theta_vals), np.array(theta_dot_vals), np.array(acceleration_vals)

# Set parameters and run simulation
t, theta, theta_dot, acceleration = simulate_pd_dde(m=0.191, L=1.0, g=9.81, P=3.0, D=0.5, T=0.1, dt=0.001, t_max=10.0, initial_angle=0.05)

# Plot the angle and angular acceleration curves over time
plt.figure(figsize=(12, 8))

# Subplot： Angle vs. time
plt.subplot(2, 1, 1)
plt.plot(t, theta, label='Angle (θ, rad)')
plt.xlabel('Time (s)')
plt.ylabel('Angle (rad)')
plt.title('PD Control Delayed System: Angle')
plt.legend()
plt.grid(True)

# Subplot: Angular acceleration vs. time
plt.subplot(2, 1, 2)
plt.plot(t, acceleration, label='Angular Acceleration (θ̈, rad/s²)', color='red')
plt.xlabel('Time (s)')
plt.ylabel('Angular Acceleration (rad/s²)')
plt.title('PD Control Delayed System: Angular Acceleration')
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.show()










